// Generated by view binder compiler. Do not edit!
package com.eduardo.fonseca.testyape.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.AppCompatImageView;
import androidx.core.widget.NestedScrollView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.eduardo.fonseca.testyape.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentRecipeDetailBinding implements ViewBinding {
  @NonNull
  private final NestedScrollView rootView;

  @NonNull
  public final Button btnMap;

  @NonNull
  public final TextView description;

  @NonNull
  public final AppCompatImageView image;

  @NonNull
  public final TextView ingredients;

  @NonNull
  public final TextView ingredientsLabel;

  @NonNull
  public final TextView name;

  @NonNull
  public final TextView steps;

  @NonNull
  public final TextView stepsLabel;

  private FragmentRecipeDetailBinding(@NonNull NestedScrollView rootView, @NonNull Button btnMap,
      @NonNull TextView description, @NonNull AppCompatImageView image,
      @NonNull TextView ingredients, @NonNull TextView ingredientsLabel, @NonNull TextView name,
      @NonNull TextView steps, @NonNull TextView stepsLabel) {
    this.rootView = rootView;
    this.btnMap = btnMap;
    this.description = description;
    this.image = image;
    this.ingredients = ingredients;
    this.ingredientsLabel = ingredientsLabel;
    this.name = name;
    this.steps = steps;
    this.stepsLabel = stepsLabel;
  }

  @Override
  @NonNull
  public NestedScrollView getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentRecipeDetailBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentRecipeDetailBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_recipe_detail, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentRecipeDetailBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btnMap;
      Button btnMap = ViewBindings.findChildViewById(rootView, id);
      if (btnMap == null) {
        break missingId;
      }

      id = R.id.description;
      TextView description = ViewBindings.findChildViewById(rootView, id);
      if (description == null) {
        break missingId;
      }

      id = R.id.image;
      AppCompatImageView image = ViewBindings.findChildViewById(rootView, id);
      if (image == null) {
        break missingId;
      }

      id = R.id.ingredients;
      TextView ingredients = ViewBindings.findChildViewById(rootView, id);
      if (ingredients == null) {
        break missingId;
      }

      id = R.id.ingredientsLabel;
      TextView ingredientsLabel = ViewBindings.findChildViewById(rootView, id);
      if (ingredientsLabel == null) {
        break missingId;
      }

      id = R.id.name;
      TextView name = ViewBindings.findChildViewById(rootView, id);
      if (name == null) {
        break missingId;
      }

      id = R.id.steps;
      TextView steps = ViewBindings.findChildViewById(rootView, id);
      if (steps == null) {
        break missingId;
      }

      id = R.id.stepsLabel;
      TextView stepsLabel = ViewBindings.findChildViewById(rootView, id);
      if (stepsLabel == null) {
        break missingId;
      }

      return new FragmentRecipeDetailBinding((NestedScrollView) rootView, btnMap, description,
          image, ingredients, ingredientsLabel, name, steps, stepsLabel);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
